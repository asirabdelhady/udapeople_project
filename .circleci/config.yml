version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here  
      workflow_id:
        type: string
      event:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
      event:
        type: string     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend/
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend/
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0

    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Test_frontend
          command: |
            cd frontend/
            npm install
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
       # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Test_backend
          command: |
            cd backend/
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scanning frontend
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm update js-yaml --depth 4
            npm update minimist --depth 4
            npm update loader-utils --depth 2
            npm update json5 --depth 3
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scanning backend
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            npm install passport-jwt@4.0.1
            npm update path-parse --depth 3
            npm update mkdirp --depth 2
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
         name: adding tar and gzip
         command: |
            yum upgrade
            yum update
            yum install tar -y
            yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text > ansible/inventory.txt
            cat ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
       - image: cimg/base:2021.04
    steps:
       - checkout
       - add_ssh_keys:
          fingerprints:
            - "69:15:eb:50:d7:dc:0d:eb:07:f1:e9:0e:92:3d:bd:51" 
       - run:
          name: Install dependencies
          command: |
            sudo apt upgrade
            sudo apt update
            sudo apt install tar -y
            sudo apt install gzip -y
            sudo apt install python3-pip
            sudo apt install ansible -y
            sudo pip install ansible
       - attach_workspace:
          at: ~/
       - run:
          name: Adding hosts to known hosts
          command: |
            #!/bin/bash/
            HOST="$(cat .circleci/ansible/inventory.txt)"
            ssh-keyscan $HOST >> $HOME/.ssh/known_hosts
       - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              npm fund
              npm install passport-jwt@4.0.1
              npm update mkdirp --depth 2
              npm update path-parse --depth 3
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
              npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/6EQRLrgkTHpCqgcNGyGLbx/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi     

  deploy-frontend:
    docker:
       - image: cimg/base:2021.04
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: Install dependencies
         command: |
            sudo apt upgrade
            sudo apt update
            sudo apt install curl
            curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo apt install tar -y
            sudo apt install gzip -y
            sudo apt install python3-pip
            sudo apt install ansible -y
            sudo pip install ansible
      - attach_workspace:
          at: ~/
      - run:
         name: Get backend url
         command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress')
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
         name: Deploy frontend objects
         command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive      
                    
  deploy-backend:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "69:15:eb:50:d7:dc:0d:eb:07:f1:e9:0e:92:3d:bd:51"
      - run:
          name: Install dependencies
          command: |
            sudo apt upgrade
            sudo apt update
            sudo apt install curl
            curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo apt install tar -y
            sudo apt install gzip -y
            sudo apt install python3-pip
            sudo apt install ansible -y
            sudo pip install ansible
      - attach_workspace:
            at: ~/
      - run:
          name: Deploy backend
          command: |
              cd backend
              npm i
              npm run build
              cd ..
              # Zip the directory
              tar -C backend -czvf artifact.tar.gz .
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml 

#   smoke-test:
#    docker:
#       Lightweight Docker image 
#     steps:
#       Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#             your code here
#       - run:
#          name: Get backend url
#          command: |
#             your code here
#       - run:
#          name: Backend smoke test.
#          command: |
#             your code here
#       - run:
#          name: Frontend smoke test.
#          command: |
#             your code here
#       Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#    docker:
#       Docker image here that supports AWS CLI
#     steps:
#       Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#             your code here
#       - run:
#          name: Update cloudfront distribution
#          command: |
#             your code here
#       Here's where you will add some code to rollback on failure  

# cleanup:
#    docker:
#       Docker image here
#    steps:
#       - checkout
#       - run:
#          name: Get old stack workflow id
#          command: |
#             your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#               your code here
#            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
           # branches:
            #  only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]